{"version":3,"sources":["redux/config.js","components/search.js","pages/home.js","redux/home/home.action.js","App.js","serviceWorker.js","redux/home/home.reducer.jsx","redux/rootReducer.js","redux/store.js","index.js"],"names":["HomeActionTypes","useStyles","makeStyles","theme","margin","searchLabel","fontSize","fontWeight","searchInput","zIndex","Search","props","classes","Grid","className","FormControl","fullWidth","InputLabel","htmlFor","placeHolder","Input","type","name","id","onChange","handleChange","onKeyPress","handleSearch","value","startAdornment","InputAdornment","position","Icon","variant","color","Home","event","setState","target","key","state","username","dispatch","payload","axios","get","getReposByUsername","this","repos","Container","maxWidth","style","display","flexDirection","message","justifyContent","map","item","index","href","full_name","Component","connect","homeReducer","withStyles","App","Boolean","window","location","hostname","match","INITIAL_STATE","isLoading","isError","action","data","response","combineReducers","middlewares","logger","promiseMiddleware","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef76134b.chunk.js","sourcesContent":["export const HomeActionTypes = {\r\n\tGET_REPOS_BY_USERNAME : 'GET_REPOS_BY_USERNAME',\r\n\tGET_REPOS_BY_USERNAME_PENDING : 'GET_REPOS_BY_USERNAME_PENDING',\r\n\tGET_REPOS_BY_USERNAME_FULFILLED : 'GET_REPOS_BY_USERNAME_FULFILLED',\r\n\tGET_REPOS_BY_USERNAME_REJECTED : 'GET_REPOS_BY_USERNAME_REJECTED',\r\n}\r\n","import React from 'react';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\tmargin: {\r\n    margin: '25px 0 25px 0',\r\n  },\r\n\r\n  searchLabel:{\r\n  \tfontSize: '30px',\r\n  \tfontWeight: 800  \t\r\n  },\r\n\r\n  searchInput:{\r\n   \tzIndex: 800,\r\n  \tfontSize: '30px',\r\n  }\r\n}))\r\n\r\nexport const Search = (props) => {\r\n\tconst classes = useStyles();\r\n\treturn(\r\n\t\t<Grid className={classes.margin}>\r\n\t\t<FormControl fullWidth>\r\n      <InputLabel \r\n        htmlFor=\"standard-adornment-amount\" \r\n        className={classes.searchLabel}\r\n      >\r\n        {props.placeHolder}\r\n      </InputLabel>\r\n      <Input\r\n      \tclassName={classes.searchInput}\r\n        type={props.type}\r\n      \tname={props.name}\r\n        id=\"standard-adornment-amount\"\r\n        onChange={props.handleChange}\r\n        onKeyPress={props.handleSearch}\r\n        value={props.value}\r\n        startAdornment={\r\n          <InputAdornment position=\"start\">\r\n            <Icon variant=\"contained\" color=\"primary\">\r\n              <SearchIcon />\r\n            </Icon>\r\n          </InputAdornment>\r\n        }\r\n      />\r\n    </FormControl>\r\n   \t</Grid>\r\n  );\r\n}","import React, {Component} from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport { getReposByUsername } from \"../redux/home/home.action\";\r\n\r\nimport {Search} from '../components/search';\r\n\r\nconst useStyles = (theme=>({\r\n\t\r\n}))\r\n\r\nclass Home extends Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t\tusername: ''\r\n\t\t}\r\n\t}\r\n\r\n\thandleChange = event =>{  \r\n\t\tthis.setState({ [event.target.name]: event.target.value });\r\n\t}\r\n\r\n\thandleSearch = (event) =>{\r\n\t\tif(event.key === 'Enter'){ \r\n\t\t\tif (this.state.username !== ''){\r\n\t\t\t\tconst username = this.state.username\r\n\t\t\t\tthis.props.dispatch(getReposByUsername(username));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst classes = this.props.classes\r\n\t\tconst repos = this.props.repos\r\n\r\n\t  return (\r\n\t    <Container maxWidth='md' style={{display:'flex', flexDirection:'column'}}>\r\n\t    \t<h1>Press 'Enter' key after you input the username</h1>\r\n\t    \t<Search \r\n\t    \t\tplaceHolder=\"Input username\"\r\n      \t\tname=\"username\"\r\n      \t\tvalue={this.state.username}\r\n      \t\thandleChange={this.handleChange}\r\n      \t\thandleSearch={this.handleSearch}\r\n\t    \t/>\r\n\t    \t{this.props.message ?\r\n\t  \t\t\t(\r\n\t\t  \t\t<Grid style={{display:'flex', justifyContent:'center'}}>\r\n      \t\t\t<h2>User not found</h2>\r\n      \t\t</Grid>\r\n      \t\t)\r\n      \t\t:\r\n      \t\t(\r\n      \t\t\t<Grid>\r\n      \t\t\t{repos.map((item, index)=>\r\n\t\t\t    \t\t<Grid>\r\n\t\t\t    \t\t\t<h3><a href={\"https://github.com/\" + item.full_name} target=\"_blank\">{item.name}</a></h3>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t    \t)}\r\n\t\t\t    \t</Grid>\r\n      \t\t)\r\n      \t}\r\n\t    </Container>\r\n\t  );\r\n  }\r\n}\r\n\r\nconst mapStatetoProps = state => ({\r\n\trepos: state.homeReducer.repos,\r\n\tmessage: state.homeReducer.message\r\n})\r\n\r\nexport default connect(mapStatetoProps)(withStyles(useStyles)(Home));\r\n","import { HomeActionTypes } from '../config';\r\nimport axios from 'axios';\r\n\r\nconst API = \"https://api.github.com/users/\";\r\n\r\nexport const getReposByUsername = (username) => ({\r\n\ttype: HomeActionTypes.GET_REPOS_BY_USERNAME,\r\n\tpayload: axios.get(`${API}${username}/repos`)\t\r\n})","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\nimport Home from './pages/home';\n\nfunction App() {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { HomeActionTypes } from '../config';\r\n\r\nconst INITIAL_STATE ={\r\n\trepos:[],\r\n\tmessage: '',\r\n\tisLoading: false,\r\n\tisError: false\r\n}\r\n\r\nconst homeReducer = (state = INITIAL_STATE, action) => {\r\n\tswitch (action.type) {\r\n\t\t\r\n\t\tcase HomeActionTypes.GET_REPOS_BY_USERNAME_PENDING :\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisLoading: true\r\n\t\t\t}\r\n\t\tcase HomeActionTypes.GET_REPOS_BY_USERNAME_FULFILLED :\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisLoading: false,\r\n\t\t\t\trepos: action.payload.data\r\n\t\t\t}\r\n\t\tcase HomeActionTypes.GET_REPOS_BY_USERNAME_REJECTED :\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisLoading: false,\r\n\t\t\t\tisError: true,\r\n\t\t\t\tmessage: action.payload.response.data.message\r\n\t\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default homeReducer;","import { combineReducers } from 'redux';\r\n\r\nimport homeReducer from './home/home.reducer';\r\n\r\nexport default combineReducers({\r\n\thomeReducer\r\n})","import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport promiseMiddleware from 'redux-promise-middleware';\r\n\r\nimport rootReducer from './rootReducer';\r\n\r\nconst middlewares = [logger, promiseMiddleware];\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, \n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}